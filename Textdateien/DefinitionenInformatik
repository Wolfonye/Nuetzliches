*Methode - an ein Objekt gebundene Funktion, sie beschreiben in der OOP eher das Verhalten eines Objektes, wohingegen eine Funktion definitorisch meist kein Objekt benötigt. Gewisse Definitionsunterschiede können je nach Sprache vorliegen. Im OOP-Kontext wird eine Methode zumeist charakteristische Eigenschaften haben wie Vererbbarkeit oder Überschreibbarkeit. Siehe auch Seite 5ff in functional.pdf in /Nuetzliches/PDF/.
*Closure - Funktion, die an eine Umgebung gebunden ist bzw. ist sie in der Lage ihre Umgebung an freien Variablen "mitzunehmen"; in JavaScript können so neben local und global Variablen auch indirekt private Variablen realisiert werden. Ein schönes Wikizitat dazu: "Er beschreibt eine Funktion, die Zugriffe auf ihren Erstellungskontext enthält. Beim Aufruf greift die Funktion dann auf diesen Erstellungskontext zu. Dieser Kontext (Speicherbereich, Zustand) ist außerhalb der Funktion nicht referenzierbar, d. h. nicht sichtbar." Ein einfaches Nutzungsbeispiel ist das counter-Dilemma. Siehe dazu in /Nuetzliches/JavaScriptBeispiele/counterDilemma.js .
*Currying - Umwandlung einer Funktion/Methode in mehreren Parametern in eine Funktion in einem Parameter (siehe Zshg. Kalküle wie Lambda); dieser Parameter ist eine Funktion. Man kaskadiert Funktionsaufrufe, dessen Parameter jeweils Funktionen sind (also eine einzelne) solange bis die "innerste" tatsächlich "rechnen kann" (siehe Wiki für Schreibweise). Insbesondere wichtig in Progsprachen, die nur einen Parameter zulassen (haskell). Siehe auch das JavaScript-Currying-Beispiel im Nuetzliches Projekt.
